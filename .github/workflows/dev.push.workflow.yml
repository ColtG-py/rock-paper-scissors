name: DEV PUSH - Build, Test, Scan, Release, Deploy

# OBJECTIVE: Code is ready, time to deploy to the dev environment!

on:
  push:
    branches: dev

env:
  SOURCE_CODE_BUCKET: test-app-staging-env/dev/deployment
  SOURCE_BUNDLE_NAME: roshambo-0.0.2-SNAPSHOT.jar
  

jobs:
  build_and_test:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:

      - name: Step 1 - Get Runner Public IP
        id: ip
        uses: haythem/public-ip@v1.2

      - name: Step 2 - Configure AWS credentials from Test account
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          role-to-assume: arn:aws:iam::874191363693:role/CloudFormationRole
          role-duration-seconds: 1200
          aws-region: us-east-1
          role-session-name: TestAccSession

      - name: Step 3 - Whitelist Runner on SonarQube
        run: |
          CIDR=${{ steps.ip.outputs.ipv4 }}/32
          aws ec2 authorize-security-group-ingress \
            --group-name SonarQubeGithubActionRunners \
            --protocol tcp \
            --port 9000 \
            --cidr $CIDR
          aws ec2 authorize-security-group-ingress \
            --group-name SonarQubeGithubActionRunners \
            --protocol tcp \
            --port 22 \
            --cidr $CIDR

      - uses: actions/checkout@v2
        with:
          fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis
      - name: Step 4 - Set up JDK 11
        uses: actions/setup-java@v1
        with:
          java-version: 11

      - name: Step 5 - Cache SonarQube packages
        uses: actions/cache@v1
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar

      - name: Step 6 - Cache Maven packages
        uses: actions/cache@v1
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2
          
      - name: Step 7 - Build and analyze
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information, if any
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
        run: |
          mvn -B verify org.sonarsource.scanner.maven:sonar-maven-plugin:sonar -Dsonar.projectKey=RoShamBo --file pom.xml
          mkdir staging && cp target/*.jar staging

      - name: Step 8 - Persist workflow data as artifacts
        uses: actions/upload-artifact@v2
        with:
          name: github-actions-artifact
          path: staging

      - name: Step 9 - Test
        run: |
          mvn -B test --file pom.xml

      - name: Step 10 - Collect Maven Release Variable
        run: |
          VERSION=$( mvn help:evaluate -Dexpression=project.version -q -DforceStdout )
          echo "::set-output name=test::$VERSION"
        id: maven-release

      - name: Step 11 - Echo Maven Release
        run: echo "test value ${{ steps.maven-release.outputs.test }}"

      - name: Step 12 - Revoke Runner Access on SonarQube
        run: |
          CIDR=${{ steps.ip.outputs.ipv4 }}/32
          aws ec2 revoke-security-group-ingress \
            --group-name SonarQubeGithubActionRunners \
            --protocol tcp \
            --port 9000 \
            --cidr $CIDR
          aws ec2 revoke-security-group-ingress \
            --group-name SonarQubeGithubActionRunners \
            --protocol tcp \
            --port 22 \
            --cidr $CIDR
        
      - name: Step 13 - Release
        run: |
          aws s3 sync target/ s3://test-app-staging-env/dev/deployment/
          aws s3 sync infra/ s3://test-app-staging-env/dev/stack/

      - name: Step 14 - Deploy to AWS CloudFormation
        uses: aws-actions/aws-cloudformation-github-deploy@v1
        with:
          name: RoShamBo
          template: infra/SpringDeployment.template
          no-fail-on-empty-changeset: "1"
          parameter-overrides: >-
            SourceCodeBucket=test-app-staging-env,
            SourceBundleName=dev/deployment/roshambo-${{ steps.maven-release.outputs.test }}.jar

      - name: Step 14 - A11Y Testing
        run:
    outputs:
        release_version: ${{ steps.maven-release.outputs.test }}