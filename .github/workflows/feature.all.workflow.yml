name: FEATURE PUSH / PULL REQUEST - Build, Test, Scan

# OBJECTIVE: Compile + Test code to ensure it's good to be merged upstream

on:
  push:
    branches:
      - "feature/*"
  pull_request:
    types: opened
    branches:
      - "feature/*"
jobs:
  run:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:


      - name: Step -2 - Get Runner Public IP
        id: ip
        uses: haythem/public-ip@v1.2

      - name: Step -1.5 - Configure AWS credentials from Test account
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          role-to-assume: arn:aws:iam::874191363693:role/CloudFormationRole
          role-duration-seconds: 1200
          aws-region: us-east-1
          role-session-name: TestAccSession

      - name: Step -1 - Whitelist Runner on SonarQube
        run: |
          aws ec2 authorize-security-group-ingress \
            --group-name SonarQubeGithubActionRunners \
            --protocol tcp \
            --port 9000 \
            --cidr {{ steps.ip.outputs.ipv4 }}/32

      - uses: actions/checkout@v2
      - name: Step 0 - SonarQube Scan
        uses: kitabisa/sonarqube-action@v1.1.0
        with:
          host: ${{ secrets.SONARQUBE_HOST }}
          login: ${{ secrets.SONARQUBE_TOKEN }}

      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: Step 1 - Checkout branch from GitHub 
        uses: actions/checkout@v2

      # Runs a single command using the runners shell
      - name: Step 2 - Set up JDK 1.8
        uses: actions/setup-java@v1
        with:
          java-version: 1.8

      - name: Step 2.5 - Test
        run: |
          mvn -B test --file pom.xml
    
      - name: Step 3 - Build Maven Project
        run: |
          mvn -B package --file pom.xml
          mkdir staging && cp target/*.jar staging

      - name: Step 4 - Set up a cache for Maven
        uses: actions/cache@v2
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Step 5 - Persist workflow data as artifacts
        uses: actions/upload-artifact@v2
        with:
          name: github-actions-artifact
          path: staging

      - name: Step 6 - Collect Maven Release Variable
        run: |
          VERSION=$( mvn help:evaluate -Dexpression=project.version -q -DforceStdout )
          echo "::set-output name=test::$VERSION"
        id: maven-release

      - name: Step 6.5 - Echo Maven Release
        run: echo "test value ${{ steps.maven-release.outputs.test }}"
    